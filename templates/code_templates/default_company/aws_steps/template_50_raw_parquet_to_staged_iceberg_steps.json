{
    "Comment": "Template #50. CREATED DATE: [:REPLACE_CURRENT_DATE], Comment: [:REPLACE_COMMENT]",
    "StartAt": "reg_task_start",
    "States": {
      
      "reg_task_start": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "arn:aws:lambda:[:REPLACE_AWS_REGION]:[:REPLACE_AWS_ACCOUNT_NUMBER]:function:odl_reg_task_action",
          "Payload": {
            "task_type": "AWS_STEPS_WORKFLOW",
            "task_id.$": "$$.Execution.Id",
            "process_date.$": "$$.Execution.Input.process_date",
            "process_hour.$": "$$.Execution.Input.process_hour",
            "force_rerun.$": "$$.Execution.Input.force_rerun",
            "set_running_task_to_failed": "False",
            "use_process_hour": "True",
            "process_yesterday": "False",
            "parent_task_id.$": "$$.Execution.Input.parent_task_id",
            "action": "start",
            "task_name.$": "$$.StateMachine.Name",
            "task_group_name": "-"
          }
        },
        "Next": "check_prev_task_status",
        "ResultPath": "$.reg_task_start",
        "Retry": [
          {
            "ErrorEquals": [
              "States.All"
            ],
            "BackoffRate": 2,
            "IntervalSeconds": 30,
            "MaxAttempts": 10
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.ALL"
            ],
            "Next": "reg_task_failure",
            "ResultPath": "$.error-info"
          }
        ]
      },

      "check_prev_task_status": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.reg_task_start.Payload.continue",
            "BooleanEquals": false,
            "Next": "Success"
          },
          {
            "Variable": "$$.Execution.Input.force_rerun",
            "StringEquals": "True",
            "Next": "check_optional_input_parameters"
          },
          {
            "Variable": "$.reg_task_start.Payload.prev.status",
            "StringEquals": "dns_stoprequest",
            "Next": "check_optional_input_parameters"
          },
          {
            "Variable": "$.reg_task_start.Payload.prev.status",
            "StringEquals": "running",
            "Next": "check_optional_input_parameters"
          },
          {
            "Variable": "$.reg_task_start.Payload.prev.status",
            "StringEquals": "Failed",
            "Next": "check_optional_input_parameters"
          },
          {
            "Variable": "$.reg_task_start.Payload.prev.status",
            "StringEquals": "not found",
            "Next": "check_optional_input_parameters"
          },
          {
            "Variable": "$.reg_task_start.Payload.prev.status",
            "StringEquals": "Success",
            "Next": "Success"
          },
          {
            "Variable": "$.reg_task_start.Payload.prev.status",
            "StringEquals": "already_completed",
            "Next": "Success"
          }
        ]
      },

      "check_optional_input_parameters": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$$.Execution.Input.optional.is_initial_load",
            "IsPresent": true,
            "Next": "set_sql"
          }
        ],
        "Default": "set_optional_parameter_default_values"
      },

      "set_optional_parameter_default_values": {
        "Type": "Pass",
        "Result": {
          "is_initial_load": false
        },
        "ResultPath": "$.optional",
        "Next": "set_sql"
      },

      "set_sql": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "arn:aws:lambda:[:REPLACE_AWS_REGION]:[:REPLACE_AWS_ACCOUNT_NUMBER]:function:odl_replace_string_2",
          "Payload": {
            "variables": [
              {
                "key": "date_yyyymmdd",
                "value.$": "$.reg_task_start.Payload.time.date_yyyymmdd"
              },
              {
                "key": "date_yyyy_mm_dd",
                "value.$": "$.reg_task_start.Payload.time.date_yyyy_mm_dd"
              },
              {
                "key": "hour",
                "value.$": "$.reg_task_start.Payload.time.hour"
              },
              {
                "key": "create_raw_table",
                "value": "[:REPLACE_CREATE_RAW_TABLE]"
              },
              {
                "key": "add_raw_partition",
                "value": "[:REPLACE_ADD_RAW_PARTITION]"
              },
              {
                "key": "create_iceberg_table",
                "value": "[:REPLACE_CREATE_ICEBERG_TABLE]"
              },
              {
                "key": "populate_data",
                "value": "[:CREATE_POPULATE_ICEBERG_DATA]"
              },
              {
                "key": "delete_data",
                "value": "[:REPLACE_DELETE_ICEBERG_PARTITION]"
              },
              {
                "key": "vacuum_table",
                "value": "[:REPLACE_VACUUM_TABLE]"
              },
              {
                "key": "optimize_table",
                "value": "[:REPLACE_OPTIMIZE_TABLE]"
              },
              {
                "key": "create_view",
                "value": "[:REPLACE_CREATE_STAGED_VIEW]"
              }
            ]
          }
        },
        "Next": "is_initial_load",
        "ResultPath": "$.set_sql"
      },

      "is_initial_load": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.optional.is_initial_load",
            "BooleanEquals": true,
            "Next": "create_raw_table"
          }
        ],
        "Default": "add_partition_to_raw"
      },

      "create_raw_table": {
        "Type": "Task",
        "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
        "Parameters": {
          "QueryString.$": "$.set_sql.Payload.create_raw_table",
          "WorkGroup": "[:REPLACE_AWS_ATHENA_WORKGROUP]",
          "ResultConfiguration": {
            "OutputLocation": "[:REPLACE_ATHENA_OUTPUT_LOCATION]"
          }
        },
        "ResultPath": "$.last_step_result",
        "Next": "create_raw_view",
        "Catch": [
          {
            "ErrorEquals": [
              "States.All",
              "States.Runtime",
              "Athena.InvalidRequestException"
            ],
            "ResultPath": "$.error_info",
            "Next": "reg_task_failure"
          }
        ]
      },

      "create_raw_view": {
        "Type": "Task",
        "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
        "Parameters": {
          "QueryString.$": "$.set_sql.Payload.create_view",
          "WorkGroup": "[:REPLACE_AWS_ATHENA_WORKGROUP]",
          "ResultConfiguration": {
            "OutputLocation": "[:REPLACE_ATHENA_OUTPUT_LOCATION]"
          }
        },
        "ResultPath": "$.last_step_result",
        "Next": "create_iceberg_table",
        "Catch": [
          {
            "ErrorEquals": [
              "States.All",
              "States.Runtime",
              "Athena.InvalidRequestException"
            ],
            "ResultPath": "$.error_info",
            "Next": "reg_task_failure"
          }
        ]
      },

      "create_iceberg_table": {
        "Type": "Task",
        "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
        "Parameters": {
          "QueryString.$": "$.set_sql.Payload.create_iceberg_table",
          "WorkGroup": "[:REPLACE_AWS_ATHENA_WORKGROUP]",
          "ResultConfiguration": {
            "OutputLocation": "[:REPLACE_ATHENA_OUTPUT_LOCATION]"
          }
        },
        "ResultPath": "$.last_step_result",
        "Next": "add_partition_to_raw",
        "Catch": [
          {
            "ErrorEquals": [
              "States.All",
              "States.Runtime",
              "Athena.InvalidRequestException"
            ],
            "ResultPath": "$.error_info",
            "Next": "reg_task_failure"
          }
        ]
      },

      "add_partition_to_raw": {
        "Type": "Task",
        "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
        "Parameters": {
          "QueryString.$": "$.set_sql.Payload.add_partition",
          "WorkGroup": "[:REPLACE_AWS_ATHENA_WORKGROUP]",
          "ResultConfiguration": {
            "OutputLocation": "[:REPLACE_ATHENA_OUTPUT_LOCATION]"
          }
        },
        "ResultPath": "$.last_step_result",
        "Next": "delete_data_in_iceberg_table",
        "Catch": [
          {
            "ErrorEquals": [
              "States.All",
              "States.Runtime",
              "Athena.InvalidRequestException"
            ],
            "ResultPath": "$.error_info",
            "Next": "reg_task_failure"
          }
        ]
      },

      "delete_data_in_iceberg_table": {
        "Type": "Task",
        "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
        "Parameters": {
          "QueryString.$": "$.set_sql.Payload.delete_data",
          "WorkGroup": "[:REPLACE_AWS_ATHENA_WORKGROUP]",
          "ResultConfiguration": {
            "OutputLocation": "[:REPLACE_ATHENA_OUTPUT_LOCATION]"
          }
        },
        "ResultPath": "$.last_step_result",
        "Next": "populate_data_in_iceberg_table",
        "Retry": [
          {
            "ErrorEquals": [
              "States.All"
            ],
            "BackoffRate": 2,
            "IntervalSeconds": 30,
            "MaxAttempts": 10
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.All",
              "States.Runtime",
              "Athena.InvalidRequestException"
            ],
            "ResultPath": "$.error_info",
            "Next": "reg_task_failure"
          }
        ]
      },

      "populate_data_in_iceberg_table": {
        "Type": "Task",
        "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
        "Parameters": {
          "QueryString.$": "$.set_sql.Payload.populate_data",
          "WorkGroup": "[:REPLACE_AWS_ATHENA_WORKGROUP]",
          "ResultConfiguration": {
            "OutputLocation": "[:REPLACE_ATHENA_OUTPUT_LOCATION]"
          }
        },
        "ResultPath": "$.last_step_result",
        "Next": "vacuum_table",
        "Retry": [
          {
            "ErrorEquals": [
              "States.All"
            ],
            "BackoffRate": 2,
            "IntervalSeconds": 30,
            "MaxAttempts": 10
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.All",
              "States.Runtime",
              "Athena.InvalidRequestException"
            ],
            "ResultPath": "$.error_info",
            "Next": "reg_task_failure"
          }
        ]
      },

      "vacuum_table": {
        "Type": "Task",
        "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
        "Parameters": {
          "QueryString.$": "$.set_sql.Payload.vacuum_table",
          "WorkGroup": "[:REPLACE_AWS_ATHENA_WORKGROUP]",
          "ResultConfiguration": {
            "OutputLocation": "[:REPLACE_ATHENA_OUTPUT_LOCATION]"
          }
        },
        "ResultPath": "$.last_step_result",
        "Next": "optimize_table",
        "Retry": [
          {
            "ErrorEquals": [
              "States.All"
            ],
            "BackoffRate": 2,
            "IntervalSeconds": 30,
            "MaxAttempts": 10
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.All",
              "States.Runtime",
              "Athena.InvalidRequestException"
            ],
            "ResultPath": "$.error_info",
            "Next": "reg_task_failure"
          }
        ]
      },

      "optimize_table": {
        "Type": "Task",
        "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
        "Parameters": {
          "QueryString.$": "$.set_sql.Payload.optimize_table",
          "WorkGroup": "[:REPLACE_AWS_ATHENA_WORKGROUP]",
          "ResultConfiguration": {
            "OutputLocation": "[:REPLACE_ATHENA_OUTPUT_LOCATION]"
          }
        },
        "ResultPath": "$.last_step_result",
        "Next": "reg_task_success",
        "Retry": [
          {
            "ErrorEquals": [
              "States.All"
            ],
            "BackoffRate": 2,
            "IntervalSeconds": 30,
            "MaxAttempts": 10
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.All",
              "States.Runtime",
              "Athena.InvalidRequestException"
            ],
            "ResultPath": "$.error_info",
            "Next": "reg_task_failure"
          }
        ]
      },

      "reg_task_success": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "arn:aws:lambda:[:REPLACE_AWS_REGION]:[:REPLACE_AWS_ACCOUNT_NUMBER]:function:odl_reg_task_action",
          "Payload": {
            "action": "success",
            "task_id.$": "$$.Execution.Id"
          }
        },
        "Next": "Success"
      },

      "reg_task_failure": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "arn:aws:lambda:[:REPLACE_AWS_REGION]:[:REPLACE_AWS_ACCOUNT_NUMBER]:function:odl_reg_task_action",
          "Payload": {
            "action": "fail",
            "task_id.$": "$$.Execution.Id"
          }
        },
        "Next": "Fail"
      },

      "Success": {
        "Type": "Succeed"
      },

      "Fail": {
        "Type": "Fail"
      }
    }
  }