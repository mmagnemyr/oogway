{
    "Comment": "Created: [:REPLACE_CURRENT_DATE], Template version:1.1,  Comment: Jobqueue Array, executes all SM in the array $.set_array" ,
    "StartAt": "reg_task_start",
    "States": {

      "reg_task_start": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "arn:aws:lambda:[:REPLACE_AWS_REGION]:[:REPLACE_AWS_ACCOUNT_NUMBER]:function:odl_reg_task_action",
          "Payload": {
            "task_type": "AWS_STEPS_WORKFLOW",
            "task_id.$": "$$.Execution.Id",
            "process_date.$": "$$.Execution.Input.process_date",
            "tag.$": "$$.Execution.Input.tag",
            "force_rerun.$": "$$.Execution.Input.force_rerun",
            "set_running_task_to_failed": "False",
            "use_process_hour": "False",
            "process_yesterday": "False",
            "parent_task_id.$": "$$.Execution.Input.parent_task_id",
            "action": "start",
            "task_name.$": "$$.StateMachine.Name"
          }
        },
        "Next": "check_prev_task_status",
        "ResultPath": "$.reg_task_start",
        "Retry": [
          {
            "ErrorEquals": [
              "States.All"
            ],
            "BackoffRate": 2,
            "IntervalSeconds": 30,
            "MaxAttempts": 10
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.ALL"
            ],
            "Next": "reg_task_failure",
            "ResultPath": "$.error-info"
          }
        ]
      },

      "check_prev_task_status": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.reg_task_start.Payload.continue",
            "BooleanEquals": false,
            "Next": "Success"
          },
          {
            "Variable": "$$.Execution.Input.force_rerun",
            "StringEquals": "True",
            "Next": "set_array"
          },
          {
            "Variable": "$.reg_task_start.Payload.prev.status",
            "StringEquals": "dns_stoprequest",
            "Next": "set_array"
          },
          {
            "Variable": "$.reg_task_start.Payload.prev.status",
            "StringEquals": "running",
            "Next": "set_array"
          },
          {
            "Variable": "$.reg_task_start.Payload.prev.status",
            "StringEquals": "Failed",
            "Next": "set_array"
          },
          {
            "Variable": "$.reg_task_start.Payload.prev.status",
            "StringEquals": "not found",
            "Next": "set_array"
          },
          {
            "Variable": "$.reg_task_start.Payload.prev.status",
            "StringEquals": "Success",
            "Next": "Success"
          },
          {
            "Variable": "$.reg_task_start.Payload.prev.status",
            "StringEquals": "already_completed",
            "Next": "Success"
          }
        ]
      },

      "set_array": {
        "Type": "Pass",
        "Parameters": {
          "Payload": {
            "array.$": "$$.Execution.Input.array_of_sm_to_run",
            "has_elements": true
          }
        },
        "ResultPath": "$.set_array",
        "Next": "get_next_element_in_array"
      },

      "get_next_element_in_array": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "arn:aws:lambda:[:REPLACE_AWS_REGION]:[:REPLACE_AWS_ACCOUNT_NUMBER]:function:odl_array_get_next_element",
          "Payload": {
            "array.$": "$.set_array.Payload.array"
          }
        },
        "Next": "get_task_group_data",
        "ResultPath": "$.set_array"
      },

      "get_task_group_data": {
        "Comment": "Check the number of running tasks with the provided task_group_name. The output is $.get_task_group_data.Payload.can_start_next. It is evaluated in the step can_start_next",
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "arn:aws:lambda:[:REPLACE_AWS_REGION]:[:REPLACE_AWS_ACCOUNT_NUMBER]:function:odl_reg_task_action",
          "Payload": {
            "task_group_name.$": "$$.Execution.Id",
            "max_number_of_running_tasks.$": "$$.Execution.Input.max_number_of_running_tasks",
            "action": "get_task_group_count_per_status"
          }
        },
        "Next": "can_start_next",
        "ResultPath": "$.get_task_group_data",
        "Retry": [
          {
            "ErrorEquals": [
              "States.All"
            ],
            "BackoffRate": 2,
            "IntervalSeconds": 30,
            "MaxAttempts": 10
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.ALL"
            ],
            "Next": "reg_task_failure",
            "ResultPath": "$.error-info"
          }
        ]
      },

      "can_start_next": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.get_task_group_data.Payload.done",
            "StringEquals": "True",
            "Next": "check_number_of_running_tasks"
          },
          {
            "Variable": "$.set_array.Payload.has_elements",
            "BooleanEquals": false,
            "Next": "check_number_of_running_tasks"
          },

           {
            "Variable": "$.get_task_group_data.Payload.can_start_next",
            "StringEquals": "True",
            "Next": "start_next_job"
          }

        ],
        "Default": "wait_before_check_again"
      },

      "check_number_of_running_tasks": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.get_task_group_data.Payload.number_of_failed",
            "NumericGreaterThan": 0,
            "Next": "reg_task_failure"
          },



          {
            "Variable": "$.get_task_group_data.Payload.number_of_running",
            "NumericGreaterThan": 0,
            "Next": "wait_before_check_again"
          }

        ],
        "Default": "reg_task_success"
      },

      

      "start_next_job": {
        "Type": "Task",
        "Resource": "arn:aws:states:::states:startExecution",
        "Parameters": {
          "StateMachineArn.$": "$.set_array.Payload.next",
          "Input": {
            "NeedCallback": "False",
            "force_rerun.$": "$$.Execution.Input.force_rerun_subtask",
            "time": "",
            "parent_task_id.$": "$$.Execution.Id",
            "process_date.$": "$.reg_task_start.Payload.process_date",
            "process_hour": "",
            "tag": "",
            "task_group_name.$": "$$.Execution.Id"
          }
        },
        "ResultPath": "$.start_next_job",
        "Next": "get_next_element_in_array"
      },

      "wait_before_check_again": {
        "Type": "Wait",
        "Seconds": 3,
        "Next": "get_task_group_data"
      },

      "reg_task_success": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "arn:aws:lambda:[:REPLACE_AWS_REGION]:[:REPLACE_AWS_ACCOUNT_NUMBER]:function:odl_reg_task_action",
          "Payload": {
            "action": "success",
            "task_id.$": "$$.Execution.Id"
          }
        },
        "Next": "Success"
      },

      "reg_task_failure": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "arn:aws:lambda:[:REPLACE_AWS_REGION]:[:REPLACE_AWS_ACCOUNT_NUMBER]:function:odl_reg_task_action",
          "Payload": {
            "action": "fail",
            "task_id.$": "$$.Execution.Id"
          }
        },
        "Next": "Fail"
      },

      "Success": {
        "Type": "Succeed"
      },

      "Fail": {
        "Type": "Fail"
      }
    }
  }