{
    "Comment": "Template #10, Load Data Vault Hub",
    "StartAt": "reg_task_start",
    "States": {
      "reg_task_start": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "arn:aws:lambda:[:REPLACE_AWS_REGION]:[:REPLACE_AWS_ACCOUNT_NUMBER]:function:odl_reg_task_action",
          "Payload": {
            "task_type": "AWS_STEPS_WORKFLOW",
            "task_id.$": "$$.Execution.Id",
            "time.$": "$$.Execution.Input.time",
            "tag.$": "$$.Execution.Input.tag",
            "force_rerun.$": "$$.Execution.Input.force_rerun",
            "set_running_task_to_failed": "True",
            "use_process_hour": "False",
            "process_yesterday": "False",
            "parent_task_id.$": "$$.Execution.Input.parent_task_id",
            "action": "start",
            "task_name.$": "$$.StateMachine.Name",
            "task_group_name.$": "$$.Execution.Input.task_group_name"
          }
        },
        "Next": "check_prev_task_status",
        "ResultPath": "$.reg_task_start",
        "Retry": [
          {
            "ErrorEquals": [
              "States.All"
            ],
            "BackoffRate": 2,
            "IntervalSeconds": 30,
            "MaxAttempts": 10
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.ALL"
            ],
            "Next": "reg_task_failure",
            "ResultPath": "$.error-info"
          }
        ]
      },
      "check_prev_task_status": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.reg_task_start.Payload.continue",
            "BooleanEquals": false,
            "Next": "Success"
          },
          {
            "Variable": "$$.Execution.Input.force_rerun",
            "StringEquals": "True",
            "Next": "set_sql"
          },
          {
            "Variable": "$.reg_task_start.Payload.prev.status",
            "StringEquals": "dns_stoprequest",
            "Next": "set_sql"
          },
          {
            "Variable": "$.reg_task_start.Payload.prev.status",
            "StringEquals": "running",
            "Next": "set_sql"
          },
          {
            "Variable": "$.reg_task_start.Payload.prev.status",
            "StringEquals": "Failed",
            "Next": "set_sql"
          },
          {
            "Variable": "$.reg_task_start.Payload.prev.status",
            "StringEquals": "not found",
            "Next": "set_sql"
          },
          {
            "Variable": "$.reg_task_start.Payload.prev.status",
            "StringEquals": "Success",
            "Next": "Success"
          },
          {
            "Variable": "$.reg_task_start.Payload.prev.status",
            "StringEquals": "already_completed",
            "Next": "Success"
          }
        ]
      },
      "set_sql": {
        "Type": "Pass",
        "Parameters": {
          "Payload": {
            "stage_view": "",
            "drop_stage_view": "",
            "materialized_stage_view": "",
            "incremental_load": "[:REPLACE_POPULATE_DATA]",
            "create_table": "[:REPLACE_CREATE_TARGET_TABLE]",
            "initial_load": "[:REPLACE_POPULATE_DATA]",
            "current_view": "[:REPLACE_CREATE_CURRENT_VIEW]"
          }
        },
        "ResultPath": "$.set_sql",
        "Next": "incremental_load"
      },
      "incremental_load": {
        "Type": "Task",
        "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
        "Parameters": {
          "QueryString.$": "$.set_sql.Payload.incremental_load",
          "WorkGroup": "[:REPLACE_AWS_ATHENA_WORKGROUP]",
          "ResultConfiguration": {
            "OutputLocation": "[:REPLACE_AWS_ATHENA_OUTPUT_LOCATION]"
          }
        },
        "ResultPath": "$.incremental_load",
        "Next": "reg_task_success",
        "Retry": [
          {
            "ErrorEquals": [
              "States.All"
            ],
            "BackoffRate": 2,
            "IntervalSeconds": 30,
            "MaxAttempts": 10
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "States.All",
              "Athena.InvalidRequestException"
            ],
            "ResultPath": "$.error_info",
            "Next": "reg_task_failure"
          }
        ]
      },
      "reg_task_success": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "arn:aws:lambda:[:REPLACE_AWS_REGION]:[:REPLACE_AWS_ACCOUNT_NUMBER]:function:odl_reg_task_action",
          "Payload": {
            "action": "success",
            "task_id.$": "$$.Execution.Id"
          }
        },
        "Next": "Success"
      },
      "reg_task_failure": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "arn:aws:lambda:[:REPLACE_AWS_REGION]:[:REPLACE_AWS_ACCOUNT_NUMBER]:function:odl_reg_task_action",
          "Payload": {
            "action": "fail",
            "task_id.$": "$$.Execution.Id"
          }
        },
        "Next": "Fail"
      },
      "Success": {
        "Type": "Succeed"
      },
      "Fail": {
        "Type": "Fail"
      }
    }
  }